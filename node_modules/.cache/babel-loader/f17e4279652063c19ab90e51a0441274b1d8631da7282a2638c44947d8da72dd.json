{"ast":null,"code":"import React,{useEffect,useRef,useState}from\"react\";import\"./style.css\";import defaultProfileImage from\"assets/image/default-profile-image.png\";import{useNavigate,useParams}from\"react-router-dom\";import BoardItem from\"components/BoardItem\";import{BOARD_PATH,BOARD_WRITE_PATH,MAIN_PATH,USER_PATH}from\"constant\";import{useLoginUserStore}from\"stores\";import{fileUploadRequest,getUserBoardListRequest,getUserRequest,patchNicknameRequest,patchProfileImageRequest}from\"apis\";import{useCookies}from\"react-cookie\";import{usePagination}from\"hooks\";import Pagination from\"components/Pagination\";// component: 유저 화면 컴포넌트 //\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";export default function User(){// state: userEmail path variable 상태 //\nconst{userEmail}=useParams();// state: 로그인 유저 상태 //\nconst{loginUser}=useLoginUserStore();// state: cookie 상태 //\nconst[cookies,setCookie]=useCookies();// state: 마이페이지 여부 상태 //\nconst[isMyPage,setMyPage]=useState(false);// function: 네비게이트 함수 //\nconst navigate=useNavigate();// function: navigate를 이용해 상세 페이지로 이동\nconst onBoardItemClick=boardNumber=>{navigate(`/board/detail/${boardNumber}`);};// component: 유저 화면 상단 컴포넌트 //\nconst UserTop=()=>{// state: 이미지 파일 인풋 참조 상태 //\nconst imageInputRef=useRef(null);// state: 닉네임 변경 여부 상태 //\nconst[isNicknameChange,setNicknameChange]=useState(false);// state: 닉네임 상태 //\nconst[nickname,setNickname]=useState(\"\");// state: 변경 닉네임 상태 //\nconst[changeNickname,setChangeNickname]=useState(\"\");// state: 프로필 이미지 상태 //\nconst[profileImage,setProfileImage]=useState(null);// function: get user response 처리 함수 //\nconst getUserResponse=responseBody=>{if(!responseBody)return;const{code}=responseBody;if(code===\"NU\")alert(\"존재하지 않는 유저입니다.\");if(code===\"DBE\")alert(\"데이터베이스 오류입니다.\");if(code!==\"SU\"){navigate(MAIN_PATH());return;}const{email,nickname,profileImage}=responseBody;setNickname(nickname);setProfileImage(profileImage);const isMyPage=email===(loginUser===null||loginUser===void 0?void 0:loginUser.email);setMyPage(isMyPage);};// function: file upload response 처리 함수 //\nconst fileUploadResponse=profileImage=>{if(!profileImage)return;if(!cookies.accessToken)return;const requestBody={profileImage};patchProfileImageRequest(requestBody,cookies.accessToken).then(patchProfileImageResponse);};// function: patch profile image response 처리 함수 //\nconst patchProfileImageResponse=responseBody=>{if(!responseBody)return;const{code}=responseBody;if(code===\"AF\")alert(\"인증에 실패했습니다.\");if(code===\"NU\")alert(\"존재하지 않는 유저입니다.\");if(code===\"DBE\")alert(\"데이터베이스 오류입니다.\");if(code!==\"SU\")return;if(!userEmail)return;getUserRequest(userEmail).then(getUserResponse);};// function: patch nickname response 처리 함수 //\nconst patchNicknameResponse=responseBody=>{if(!responseBody)return;const{code}=responseBody;if(code===\"VF\")alert(\"닉네임은 필수입니다.\");if(code===\"AF\")alert(\"인증에 실패했습니다.\");if(code===\"DN\")alert(\"중복되는 닉네임입니다.\");if(code===\"NP\")alert(\"권한이 없습니다.\");if(code===\"NU\")alert(\"존재하지 않는 유저입니다.\");if(code===\"DBE\")alert(\"데이터베이스 오류입니다.\");if(code!==\"SU\")return;if(!userEmail)return;getUserRequest(userEmail).then(getUserResponse);setNicknameChange(false);};// event handler:프로필 박스 클릭 이벤트 처리 //\nconst onProfileBoxClickHandler=()=>{if(!isMyPage)return;if(!imageInputRef.current)return;imageInputRef.current.click();};// event handler: 닉네임 수정 버튼 클릭 이벤트 처리 //\nconst onNicknameEditButtonClickHandler=()=>{if(!isNicknameChange){setChangeNickname(nickname);setNicknameChange(!isNicknameChange);return;}if(!cookies.accessToken)return;const requestBody={nickname:changeNickname};patchNicknameRequest(requestBody,cookies.accessToken).then(patchNicknameResponse);};// event handler:프로필 이미지 변경 이벤트 처리 //\nconst onProfileImageChangeHandler=event=>{if(!event.target.files||!event.target.files.length)return;const file=event.target.files[0];const data=new FormData();data.append(\"file\",file);fileUploadRequest(data).then(fileUploadResponse);};// event handler: 닉네임 변경 이벤트 처리 //\nconst onNicknameChangeHandler=event=>{const{value}=event.target;setChangeNickname(value);};// Effect: email path variable 변경 시 실행 할 함수 //\nuseEffect(()=>{if(!userEmail)return;getUserRequest(userEmail).then(getUserResponse);},[userEmail]);// render: 유저 화면 상단 컴포넌트 렌더링 //\nreturn/*#__PURE__*/_jsx(\"div\",{id:\"user-top-wrapper\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"user-top-container\",children:[isMyPage?/*#__PURE__*/_jsxs(\"div\",{className:\"user-top-my-profile-image-box\",onClick:onProfileBoxClickHandler,children:[profileImage!==null?/*#__PURE__*/_jsx(\"div\",{className:\"user-top-profile-image\",style:{backgroundImage:`url(${profileImage})`}}):/*#__PURE__*/_jsx(\"div\",{className:\"user-top-my-profile-image-nothing-box\",children:/*#__PURE__*/_jsx(\"div\",{className:\"icon-box-large\",children:/*#__PURE__*/_jsx(\"div\",{className:\"icon image-box-white-icon\"})})}),/*#__PURE__*/_jsx(\"input\",{ref:imageInputRef,type:\"file\",accept:\"image/*\",style:{display:\"none\"},onChange:onProfileImageChangeHandler})]}):/*#__PURE__*/_jsx(\"div\",{className:\"user-top-profile-image-box\",style:{backgroundImage:`url(${profileImage?profileImage:defaultProfileImage})`}}),/*#__PURE__*/_jsxs(\"div\",{className:\"user-top-info-box\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"user-top-info-nickname-box\",children:isMyPage?/*#__PURE__*/_jsxs(_Fragment,{children:[isNicknameChange?/*#__PURE__*/_jsx(\"input\",{className:\"user-top-info-nickname-input\",type:\"text\",size:changeNickname.length+2,value:changeNickname,onChange:onNicknameChangeHandler}):/*#__PURE__*/_jsx(\"div\",{className:\"user-top-info-nickname\",children:nickname}),/*#__PURE__*/_jsx(\"div\",{className:\"icon-button\",onClick:onNicknameEditButtonClickHandler,children:/*#__PURE__*/_jsx(\"div\",{className:\"icon edit-icon\"})})]}):/*#__PURE__*/_jsx(\"div\",{className:\"user-top-info-nickname\",children:nickname})}),/*#__PURE__*/_jsx(\"div\",{className:\"user-top-info-email\",children:userEmail})]})]})});};// component: 유저 화면 하단 컴포넌트 //\nconst UserBottom=()=>{// state: 페이지네이션 관련 상태 //\nconst{currentPage,currentSection,viewList,viewPageList,totalSection,setCurrentPage,setCurrentSection,setTotalList}=usePagination(5);// state: 게시물 개수 상태 //\nconst[count,setCount]=useState(0);// function: get user board list response 처리 함수 //\nconst getUserBoardListResponse=responseBody=>{if(!responseBody)return;const{code}=responseBody;if(code===\"NU\"){alert(\"존재하지 않는 유저입니다.\");navigate(MAIN_PATH());return;}if(code===\"DBE\")alert(\"데이터베이스 오류입니다.\");if(code!==\"SU\")return;const{userBoardList}=responseBody;setTotalList(userBoardList);setCount(userBoardList.length);};// event handler: 사이드 카드 클릭 이벤트 처리 //\nconst onSideCardClickHandler=()=>{if(isMyPage)navigate(BOARD_PATH()+\"/\"+BOARD_WRITE_PATH());else if(loginUser)navigate(USER_PATH(loginUser.email));};// effect: userEmail path variable이 변경될 때마다 실행할 함수 //\nuseEffect(()=>{if(!userEmail)return;getUserBoardListRequest(userEmail).then(getUserBoardListResponse);},[userEmail]);// render: 유저 화면 하단 컴포넌트 렌더링 //\nreturn/*#__PURE__*/_jsx(\"div\",{id:\"user-bottom-wrapper\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"user-bottom-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"user-bottom-title\",children:[isMyPage?\"내 게시물 \":\"게시물 \",/*#__PURE__*/_jsx(\"span\",{className:\"emphasis\",children:count})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"user-bottom-contents-box\",children:[count===0?/*#__PURE__*/_jsx(\"div\",{className:\"user-bottom-contents-nothing\",children:\"게시물이 없습니다.\"}):/*#__PURE__*/_jsx(\"div\",{className:\"user-bottom-contents\",children:viewList.map(boardListItem=>/*#__PURE__*/_jsx(\"div\",{onClick:()=>onBoardItemClick(boardListItem.boardNumber),children:/*#__PURE__*/_jsx(BoardItem,{boardListItem:boardListItem})},boardListItem.boardNumber))}),/*#__PURE__*/_jsx(\"div\",{className:\"user-bottom-side-box\",children:/*#__PURE__*/_jsx(\"div\",{className:\"user-bottom-side-card\",onClick:onSideCardClickHandler,children:/*#__PURE__*/_jsx(\"div\",{className:\"user-bottom-side-container\",children:isMyPage?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"icon-box\",children:/*#__PURE__*/_jsx(\"div\",{className:\"icon edit-icon\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"user-bottom-side-text\",children:\"글쓰기\"})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"user-bottom-side-text\",children:\"내 게시물로 가기\"}),/*#__PURE__*/_jsx(\"div\",{className:\"icon-box\",children:/*#__PURE__*/_jsx(\"div\",{className:\"icon arrow-right-icon\"})})]})})})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"user-bottom-pagination-box\",children:count!==0&&/*#__PURE__*/_jsx(Pagination,{currentPage:currentPage,setCurrentPage:setCurrentPage,totalItems:count// 총 게시물 수\n,itemsPerPage:5// 한 페이지당 게시물 수\n})})]})});};// render: 유저 화면 컴포넌트 렌더링 //\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(UserTop,{}),/*#__PURE__*/_jsx(UserBottom,{})]});}","map":{"version":3,"names":["React","useEffect","useRef","useState","defaultProfileImage","useNavigate","useParams","BoardItem","BOARD_PATH","BOARD_WRITE_PATH","MAIN_PATH","USER_PATH","useLoginUserStore","fileUploadRequest","getUserBoardListRequest","getUserRequest","patchNicknameRequest","patchProfileImageRequest","useCookies","usePagination","Pagination","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","User","userEmail","loginUser","cookies","setCookie","isMyPage","setMyPage","navigate","onBoardItemClick","boardNumber","UserTop","imageInputRef","isNicknameChange","setNicknameChange","nickname","setNickname","changeNickname","setChangeNickname","profileImage","setProfileImage","getUserResponse","responseBody","code","alert","email","fileUploadResponse","accessToken","requestBody","then","patchProfileImageResponse","patchNicknameResponse","onProfileBoxClickHandler","current","click","onNicknameEditButtonClickHandler","onProfileImageChangeHandler","event","target","files","length","file","data","FormData","append","onNicknameChangeHandler","value","id","children","className","onClick","style","backgroundImage","ref","type","accept","display","onChange","size","UserBottom","currentPage","currentSection","viewList","viewPageList","totalSection","setCurrentPage","setCurrentSection","setTotalList","count","setCount","getUserBoardListResponse","userBoardList","onSideCardClickHandler","map","boardListItem","totalItems","itemsPerPage"],"sources":["C:/Springboot-React-ts/board-front/src/views/User/index.tsx"],"sourcesContent":["import React, { ChangeEvent, useEffect, useRef, useState } from \"react\";\r\nimport \"./style.css\";\r\nimport defaultProfileImage from \"assets/image/default-profile-image.png\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { BoardListItem } from \"types/interface\";\r\nimport { latestBoardListMock } from \"mocks\";\r\nimport BoardItem from \"components/BoardItem\";\r\nimport { BOARD_PATH, BOARD_WRITE_PATH, MAIN_PATH, USER_PATH } from \"constant\";\r\nimport { useLoginUserStore } from \"stores\";\r\nimport {\r\n  fileUploadRequest,\r\n  getUserBoardListRequest,\r\n  getUserRequest,\r\n  patchNicknameRequest,\r\n  patchProfileImageRequest,\r\n} from \"apis\";\r\nimport {\r\n  GetUserResponseDto,\r\n  PatchNicknameResponseDto,\r\n  PatchProfileImageResponseDto,\r\n} from \"apis/response/user\";\r\nimport { ResponseDto } from \"apis/response\";\r\nimport {\r\n  PatchNicknameRequestDto,\r\n  PatchProfileImageRequestDto,\r\n} from \"apis/request/user\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { usePagination } from \"hooks\";\r\nimport { GetUserBoardListResponseDto } from \"apis/response/board\";\r\nimport Pagination from \"components/Pagination\";\r\n\r\n// component: 유저 화면 컴포넌트 //\r\nexport default function User() {\r\n  // state: userEmail path variable 상태 //\r\n  const { userEmail } = useParams();\r\n  // state: 로그인 유저 상태 //\r\n  const { loginUser } = useLoginUserStore();\r\n  // state: cookie 상태 //\r\n  const [cookies, setCookie] = useCookies();\r\n  // state: 마이페이지 여부 상태 //\r\n  const [isMyPage, setMyPage] = useState<boolean>(false);\r\n\r\n  // function: 네비게이트 함수 //\r\n  const navigate = useNavigate();\r\n  // function: navigate를 이용해 상세 페이지로 이동\r\n  const onBoardItemClick = (boardNumber: number) => {\r\n    navigate(`/board/detail/${boardNumber}`);\r\n  };\r\n  // component: 유저 화면 상단 컴포넌트 //\r\n  const UserTop = () => {\r\n    // state: 이미지 파일 인풋 참조 상태 //\r\n    const imageInputRef = useRef<HTMLInputElement | null>(null);\r\n    // state: 닉네임 변경 여부 상태 //\r\n    const [isNicknameChange, setNicknameChange] = useState<boolean>(false);\r\n    // state: 닉네임 상태 //\r\n    const [nickname, setNickname] = useState<string>(\"\");\r\n    // state: 변경 닉네임 상태 //\r\n    const [changeNickname, setChangeNickname] = useState<string>(\"\");\r\n    // state: 프로필 이미지 상태 //\r\n    const [profileImage, setProfileImage] = useState<string | null>(null);\r\n\r\n    // function: get user response 처리 함수 //\r\n    const getUserResponse = (\r\n      responseBody: GetUserResponseDto | ResponseDto | null\r\n    ) => {\r\n      if (!responseBody) return;\r\n      const { code } = responseBody;\r\n      if (code === \"NU\") alert(\"존재하지 않는 유저입니다.\");\r\n      if (code === \"DBE\") alert(\"데이터베이스 오류입니다.\");\r\n      if (code !== \"SU\") {\r\n        navigate(MAIN_PATH());\r\n        return;\r\n      }\r\n\r\n      const { email, nickname, profileImage } =\r\n        responseBody as GetUserResponseDto;\r\n      setNickname(nickname);\r\n      setProfileImage(profileImage);\r\n      const isMyPage = email === loginUser?.email;\r\n      setMyPage(isMyPage);\r\n    };\r\n\r\n    // function: file upload response 처리 함수 //\r\n    const fileUploadResponse = (profileImage: string | null) => {\r\n      if (!profileImage) return;\r\n\r\n      if (!cookies.accessToken) return;\r\n      const requestBody: PatchProfileImageRequestDto = { profileImage };\r\n      patchProfileImageRequest(requestBody, cookies.accessToken).then(\r\n        patchProfileImageResponse\r\n      );\r\n    };\r\n\r\n    // function: patch profile image response 처리 함수 //\r\n    const patchProfileImageResponse = (\r\n      responseBody: PatchProfileImageResponseDto | ResponseDto | null\r\n    ) => {\r\n      if (!responseBody) return;\r\n      const { code } = responseBody;\r\n      if (code === \"AF\") alert(\"인증에 실패했습니다.\");\r\n      if (code === \"NU\") alert(\"존재하지 않는 유저입니다.\");\r\n      if (code === \"DBE\") alert(\"데이터베이스 오류입니다.\");\r\n      if (code !== \"SU\") return;\r\n\r\n      if (!userEmail) return;\r\n      getUserRequest(userEmail).then(getUserResponse);\r\n    };\r\n\r\n    // function: patch nickname response 처리 함수 //\r\n    const patchNicknameResponse = (\r\n      responseBody: PatchNicknameResponseDto | ResponseDto | null\r\n    ) => {\r\n      if (!responseBody) return;\r\n      const { code } = responseBody;\r\n      if (code === \"VF\") alert(\"닉네임은 필수입니다.\");\r\n      if (code === \"AF\") alert(\"인증에 실패했습니다.\");\r\n      if (code === \"DN\") alert(\"중복되는 닉네임입니다.\");\r\n      if (code === \"NP\") alert(\"권한이 없습니다.\");\r\n      if (code === \"NU\") alert(\"존재하지 않는 유저입니다.\");\r\n      if (code === \"DBE\") alert(\"데이터베이스 오류입니다.\");\r\n      if (code !== \"SU\") return;\r\n\r\n      if (!userEmail) return;\r\n      getUserRequest(userEmail).then(getUserResponse);\r\n      setNicknameChange(false);\r\n    };\r\n    // event handler:프로필 박스 클릭 이벤트 처리 //\r\n    const onProfileBoxClickHandler = () => {\r\n      if (!isMyPage) return;\r\n      if (!imageInputRef.current) return;\r\n      imageInputRef.current.click();\r\n    };\r\n    // event handler: 닉네임 수정 버튼 클릭 이벤트 처리 //\r\n    const onNicknameEditButtonClickHandler = () => {\r\n      if (!isNicknameChange) {\r\n        setChangeNickname(nickname);\r\n        setNicknameChange(!isNicknameChange);\r\n        return;\r\n      }\r\n      if (!cookies.accessToken) return;\r\n      const requestBody: PatchNicknameRequestDto = {\r\n        nickname: changeNickname,\r\n      };\r\n      patchNicknameRequest(requestBody, cookies.accessToken).then(\r\n        patchNicknameResponse\r\n      );\r\n    };\r\n    // event handler:프로필 이미지 변경 이벤트 처리 //\r\n    const onProfileImageChangeHandler = (\r\n      event: ChangeEvent<HTMLInputElement>\r\n    ) => {\r\n      if (!event.target.files || !event.target.files.length) return;\r\n\r\n      const file = event.target.files[0];\r\n      const data = new FormData();\r\n      data.append(\"file\", file);\r\n\r\n      fileUploadRequest(data).then(fileUploadResponse);\r\n    };\r\n    // event handler: 닉네임 변경 이벤트 처리 //\r\n    const onNicknameChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n      const { value } = event.target;\r\n      setChangeNickname(value);\r\n    };\r\n\r\n    // Effect: email path variable 변경 시 실행 할 함수 //\r\n    useEffect(() => {\r\n      if (!userEmail) return;\r\n      getUserRequest(userEmail).then(getUserResponse);\r\n    }, [userEmail]);\r\n\r\n    // render: 유저 화면 상단 컴포넌트 렌더링 //\r\n    return (\r\n      <div id=\"user-top-wrapper\">\r\n        <div className=\"user-top-container\">\r\n          {isMyPage ? (\r\n            <div\r\n              className=\"user-top-my-profile-image-box\"\r\n              onClick={onProfileBoxClickHandler}\r\n            >\r\n              {profileImage !== null ? (\r\n                <div\r\n                  className=\"user-top-profile-image\"\r\n                  style={{\r\n                    backgroundImage: `url(${profileImage})`,\r\n                  }}\r\n                ></div>\r\n              ) : (\r\n                <div className=\"user-top-my-profile-image-nothing-box\">\r\n                  <div className=\"icon-box-large\">\r\n                    <div className=\"icon image-box-white-icon\"></div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              <input\r\n                ref={imageInputRef}\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                style={{ display: \"none\" }}\r\n                onChange={onProfileImageChangeHandler}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div\r\n              className=\"user-top-profile-image-box\"\r\n              style={{\r\n                backgroundImage: `url(${\r\n                  profileImage ? profileImage : defaultProfileImage\r\n                })`,\r\n              }}\r\n            ></div>\r\n          )}\r\n          <div className=\"user-top-info-box\">\r\n            <div className=\"user-top-info-nickname-box\">\r\n              {isMyPage ? (\r\n                <>\r\n                  {isNicknameChange ? (\r\n                    <input\r\n                      className=\"user-top-info-nickname-input\"\r\n                      type=\"text\"\r\n                      size={changeNickname.length + 2}\r\n                      value={changeNickname}\r\n                      onChange={onNicknameChangeHandler}\r\n                    />\r\n                  ) : (\r\n                    <div className=\"user-top-info-nickname\">{nickname}</div>\r\n                  )}\r\n\r\n                  <div\r\n                    className=\"icon-button\"\r\n                    onClick={onNicknameEditButtonClickHandler}\r\n                  >\r\n                    <div className=\"icon edit-icon\"></div>\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                <div className=\"user-top-info-nickname\">{nickname}</div>\r\n              )}\r\n            </div>\r\n            <div className=\"user-top-info-email\">{userEmail}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // component: 유저 화면 하단 컴포넌트 //\r\n\r\n  const UserBottom = () => {\r\n    // state: 페이지네이션 관련 상태 //\r\n    const {\r\n      currentPage,\r\n      currentSection,\r\n      viewList,\r\n      viewPageList,\r\n      totalSection,\r\n      setCurrentPage,\r\n      setCurrentSection,\r\n      setTotalList,\r\n    } = usePagination<BoardListItem>(5);\r\n    // state: 게시물 개수 상태 //\r\n    const [count, setCount] = useState<number>(0);\r\n\r\n    // function: get user board list response 처리 함수 //\r\n    const getUserBoardListResponse = (\r\n      responseBody: GetUserBoardListResponseDto | ResponseDto | null\r\n    ) => {\r\n      if (!responseBody) return;\r\n      const { code } = responseBody;\r\n      if (code === \"NU\") {\r\n        alert(\"존재하지 않는 유저입니다.\");\r\n        navigate(MAIN_PATH());\r\n        return;\r\n      }\r\n      if (code === \"DBE\") alert(\"데이터베이스 오류입니다.\");\r\n      if (code !== \"SU\") return;\r\n\r\n      const { userBoardList } = responseBody as GetUserBoardListResponseDto;\r\n      setTotalList(userBoardList);\r\n      setCount(userBoardList.length);\r\n    };\r\n\r\n    // event handler: 사이드 카드 클릭 이벤트 처리 //\r\n    const onSideCardClickHandler = () => {\r\n      if (isMyPage) navigate(BOARD_PATH() + \"/\" + BOARD_WRITE_PATH());\r\n      else if (loginUser) navigate(USER_PATH(loginUser.email));\r\n    };\r\n\r\n    // effect: userEmail path variable이 변경될 때마다 실행할 함수 //\r\n    useEffect(() => {\r\n      if (!userEmail) return;\r\n      getUserBoardListRequest(userEmail).then(getUserBoardListResponse);\r\n    }, [userEmail]);\r\n\r\n    // render: 유저 화면 하단 컴포넌트 렌더링 //\r\n    return (\r\n      <div id=\"user-bottom-wrapper\">\r\n        <div className=\"user-bottom-container\">\r\n          <div className=\"user-bottom-title\">\r\n            {isMyPage ? \"내 게시물 \" : \"게시물 \"}\r\n            <span className=\"emphasis\">{count}</span>\r\n          </div>\r\n          <div className=\"user-bottom-contents-box\">\r\n            {count === 0 ? (\r\n              <div className=\"user-bottom-contents-nothing\">\r\n                {\"게시물이 없습니다.\"}\r\n              </div>\r\n            ) : (\r\n              <div className=\"user-bottom-contents\">\r\n                {viewList.map((boardListItem) => (\r\n                  <div\r\n                    key={boardListItem.boardNumber}\r\n                    onClick={() => onBoardItemClick(boardListItem.boardNumber)}\r\n                  >\r\n                    <BoardItem boardListItem={boardListItem} />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n            <div className=\"user-bottom-side-box\">\r\n              <div\r\n                className=\"user-bottom-side-card\"\r\n                onClick={onSideCardClickHandler}\r\n              >\r\n                <div className=\"user-bottom-side-container\">\r\n                  {isMyPage ? (\r\n                    <>\r\n                      <div className=\"icon-box\">\r\n                        <div className=\"icon edit-icon\"></div>\r\n                      </div>\r\n                      <div className=\"user-bottom-side-text\">{\"글쓰기\"}</div>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <div className=\"user-bottom-side-text\">\r\n                        {\"내 게시물로 가기\"}\r\n                      </div>\r\n                      <div className=\"icon-box\">\r\n                        <div className=\"icon arrow-right-icon\"></div>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"user-bottom-pagination-box\">\r\n            {count !== 0 && (\r\n              <Pagination\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                totalItems={count} // 총 게시물 수\r\n                itemsPerPage={5} // 한 페이지당 게시물 수\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // render: 유저 화면 컴포넌트 렌더링 //\r\n  return (\r\n    <>\r\n      <UserTop />\r\n      <UserBottom />\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAiBC,SAAS,CAAEC,MAAM,CAAEC,QAAQ,KAAQ,OAAO,CACvE,MAAO,aAAa,CACpB,MAAO,CAAAC,mBAAmB,KAAM,wCAAwC,CACxE,OAASC,WAAW,CAAEC,SAAS,KAAQ,kBAAkB,CAGzD,MAAO,CAAAC,SAAS,KAAM,sBAAsB,CAC5C,OAASC,UAAU,CAAEC,gBAAgB,CAAEC,SAAS,CAAEC,SAAS,KAAQ,UAAU,CAC7E,OAASC,iBAAiB,KAAQ,QAAQ,CAC1C,OACEC,iBAAiB,CACjBC,uBAAuB,CACvBC,cAAc,CACdC,oBAAoB,CACpBC,wBAAwB,KACnB,MAAM,CAWb,OAASC,UAAU,KAAQ,cAAc,CACzC,OAASC,aAAa,KAAQ,OAAO,CAErC,MAAO,CAAAC,UAAU,KAAM,uBAAuB,CAE9C;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBACA,cAAe,SAAS,CAAAC,IAAIA,CAAA,CAAG,CAC7B;AACA,KAAM,CAAEC,SAAU,CAAC,CAAGtB,SAAS,CAAC,CAAC,CACjC;AACA,KAAM,CAAEuB,SAAU,CAAC,CAAGjB,iBAAiB,CAAC,CAAC,CACzC;AACA,KAAM,CAACkB,OAAO,CAAEC,SAAS,CAAC,CAAGb,UAAU,CAAC,CAAC,CACzC;AACA,KAAM,CAACc,QAAQ,CAAEC,SAAS,CAAC,CAAG9B,QAAQ,CAAU,KAAK,CAAC,CAEtD;AACA,KAAM,CAAA+B,QAAQ,CAAG7B,WAAW,CAAC,CAAC,CAC9B;AACA,KAAM,CAAA8B,gBAAgB,CAAIC,WAAmB,EAAK,CAChDF,QAAQ,CAAC,iBAAiBE,WAAW,EAAE,CAAC,CAC1C,CAAC,CACD;AACA,KAAM,CAAAC,OAAO,CAAGA,CAAA,GAAM,CACpB;AACA,KAAM,CAAAC,aAAa,CAAGpC,MAAM,CAA0B,IAAI,CAAC,CAC3D;AACA,KAAM,CAACqC,gBAAgB,CAAEC,iBAAiB,CAAC,CAAGrC,QAAQ,CAAU,KAAK,CAAC,CACtE;AACA,KAAM,CAACsC,QAAQ,CAAEC,WAAW,CAAC,CAAGvC,QAAQ,CAAS,EAAE,CAAC,CACpD;AACA,KAAM,CAACwC,cAAc,CAAEC,iBAAiB,CAAC,CAAGzC,QAAQ,CAAS,EAAE,CAAC,CAChE;AACA,KAAM,CAAC0C,YAAY,CAAEC,eAAe,CAAC,CAAG3C,QAAQ,CAAgB,IAAI,CAAC,CAErE;AACA,KAAM,CAAA4C,eAAe,CACnBC,YAAqD,EAClD,CACH,GAAI,CAACA,YAAY,CAAE,OACnB,KAAM,CAAEC,IAAK,CAAC,CAAGD,YAAY,CAC7B,GAAIC,IAAI,GAAK,IAAI,CAAEC,KAAK,CAAC,gBAAgB,CAAC,CAC1C,GAAID,IAAI,GAAK,KAAK,CAAEC,KAAK,CAAC,eAAe,CAAC,CAC1C,GAAID,IAAI,GAAK,IAAI,CAAE,CACjBf,QAAQ,CAACxB,SAAS,CAAC,CAAC,CAAC,CACrB,OACF,CAEA,KAAM,CAAEyC,KAAK,CAAEV,QAAQ,CAAEI,YAAa,CAAC,CACrCG,YAAkC,CACpCN,WAAW,CAACD,QAAQ,CAAC,CACrBK,eAAe,CAACD,YAAY,CAAC,CAC7B,KAAM,CAAAb,QAAQ,CAAGmB,KAAK,IAAKtB,SAAS,SAATA,SAAS,iBAATA,SAAS,CAAEsB,KAAK,EAC3ClB,SAAS,CAACD,QAAQ,CAAC,CACrB,CAAC,CAED;AACA,KAAM,CAAAoB,kBAAkB,CAAIP,YAA2B,EAAK,CAC1D,GAAI,CAACA,YAAY,CAAE,OAEnB,GAAI,CAACf,OAAO,CAACuB,WAAW,CAAE,OAC1B,KAAM,CAAAC,WAAwC,CAAG,CAAET,YAAa,CAAC,CACjE5B,wBAAwB,CAACqC,WAAW,CAAExB,OAAO,CAACuB,WAAW,CAAC,CAACE,IAAI,CAC7DC,yBACF,CAAC,CACH,CAAC,CAED;AACA,KAAM,CAAAA,yBAAyB,CAC7BR,YAA+D,EAC5D,CACH,GAAI,CAACA,YAAY,CAAE,OACnB,KAAM,CAAEC,IAAK,CAAC,CAAGD,YAAY,CAC7B,GAAIC,IAAI,GAAK,IAAI,CAAEC,KAAK,CAAC,aAAa,CAAC,CACvC,GAAID,IAAI,GAAK,IAAI,CAAEC,KAAK,CAAC,gBAAgB,CAAC,CAC1C,GAAID,IAAI,GAAK,KAAK,CAAEC,KAAK,CAAC,eAAe,CAAC,CAC1C,GAAID,IAAI,GAAK,IAAI,CAAE,OAEnB,GAAI,CAACrB,SAAS,CAAE,OAChBb,cAAc,CAACa,SAAS,CAAC,CAAC2B,IAAI,CAACR,eAAe,CAAC,CACjD,CAAC,CAED;AACA,KAAM,CAAAU,qBAAqB,CACzBT,YAA2D,EACxD,CACH,GAAI,CAACA,YAAY,CAAE,OACnB,KAAM,CAAEC,IAAK,CAAC,CAAGD,YAAY,CAC7B,GAAIC,IAAI,GAAK,IAAI,CAAEC,KAAK,CAAC,aAAa,CAAC,CACvC,GAAID,IAAI,GAAK,IAAI,CAAEC,KAAK,CAAC,aAAa,CAAC,CACvC,GAAID,IAAI,GAAK,IAAI,CAAEC,KAAK,CAAC,cAAc,CAAC,CACxC,GAAID,IAAI,GAAK,IAAI,CAAEC,KAAK,CAAC,WAAW,CAAC,CACrC,GAAID,IAAI,GAAK,IAAI,CAAEC,KAAK,CAAC,gBAAgB,CAAC,CAC1C,GAAID,IAAI,GAAK,KAAK,CAAEC,KAAK,CAAC,eAAe,CAAC,CAC1C,GAAID,IAAI,GAAK,IAAI,CAAE,OAEnB,GAAI,CAACrB,SAAS,CAAE,OAChBb,cAAc,CAACa,SAAS,CAAC,CAAC2B,IAAI,CAACR,eAAe,CAAC,CAC/CP,iBAAiB,CAAC,KAAK,CAAC,CAC1B,CAAC,CACD;AACA,KAAM,CAAAkB,wBAAwB,CAAGA,CAAA,GAAM,CACrC,GAAI,CAAC1B,QAAQ,CAAE,OACf,GAAI,CAACM,aAAa,CAACqB,OAAO,CAAE,OAC5BrB,aAAa,CAACqB,OAAO,CAACC,KAAK,CAAC,CAAC,CAC/B,CAAC,CACD;AACA,KAAM,CAAAC,gCAAgC,CAAGA,CAAA,GAAM,CAC7C,GAAI,CAACtB,gBAAgB,CAAE,CACrBK,iBAAiB,CAACH,QAAQ,CAAC,CAC3BD,iBAAiB,CAAC,CAACD,gBAAgB,CAAC,CACpC,OACF,CACA,GAAI,CAACT,OAAO,CAACuB,WAAW,CAAE,OAC1B,KAAM,CAAAC,WAAoC,CAAG,CAC3Cb,QAAQ,CAAEE,cACZ,CAAC,CACD3B,oBAAoB,CAACsC,WAAW,CAAExB,OAAO,CAACuB,WAAW,CAAC,CAACE,IAAI,CACzDE,qBACF,CAAC,CACH,CAAC,CACD;AACA,KAAM,CAAAK,2BAA2B,CAC/BC,KAAoC,EACjC,CACH,GAAI,CAACA,KAAK,CAACC,MAAM,CAACC,KAAK,EAAI,CAACF,KAAK,CAACC,MAAM,CAACC,KAAK,CAACC,MAAM,CAAE,OAEvD,KAAM,CAAAC,IAAI,CAAGJ,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAClC,KAAM,CAAAG,IAAI,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC3BD,IAAI,CAACE,MAAM,CAAC,MAAM,CAAEH,IAAI,CAAC,CAEzBtD,iBAAiB,CAACuD,IAAI,CAAC,CAACb,IAAI,CAACH,kBAAkB,CAAC,CAClD,CAAC,CACD;AACA,KAAM,CAAAmB,uBAAuB,CAAIR,KAAoC,EAAK,CACxE,KAAM,CAAES,KAAM,CAAC,CAAGT,KAAK,CAACC,MAAM,CAC9BpB,iBAAiB,CAAC4B,KAAK,CAAC,CAC1B,CAAC,CAED;AACAvE,SAAS,CAAC,IAAM,CACd,GAAI,CAAC2B,SAAS,CAAE,OAChBb,cAAc,CAACa,SAAS,CAAC,CAAC2B,IAAI,CAACR,eAAe,CAAC,CACjD,CAAC,CAAE,CAACnB,SAAS,CAAC,CAAC,CAEf;AACA,mBACEN,IAAA,QAAKmD,EAAE,CAAC,kBAAkB,CAAAC,QAAA,cACxBlD,KAAA,QAAKmD,SAAS,CAAC,oBAAoB,CAAAD,QAAA,EAChC1C,QAAQ,cACPR,KAAA,QACEmD,SAAS,CAAC,+BAA+B,CACzCC,OAAO,CAAElB,wBAAyB,CAAAgB,QAAA,EAEjC7B,YAAY,GAAK,IAAI,cACpBvB,IAAA,QACEqD,SAAS,CAAC,wBAAwB,CAClCE,KAAK,CAAE,CACLC,eAAe,CAAE,OAAOjC,YAAY,GACtC,CAAE,CACE,CAAC,cAEPvB,IAAA,QAAKqD,SAAS,CAAC,uCAAuC,CAAAD,QAAA,cACpDpD,IAAA,QAAKqD,SAAS,CAAC,gBAAgB,CAAAD,QAAA,cAC7BpD,IAAA,QAAKqD,SAAS,CAAC,2BAA2B,CAAM,CAAC,CAC9C,CAAC,CACH,CACN,cACDrD,IAAA,UACEyD,GAAG,CAAEzC,aAAc,CACnB0C,IAAI,CAAC,MAAM,CACXC,MAAM,CAAC,SAAS,CAChBJ,KAAK,CAAE,CAAEK,OAAO,CAAE,MAAO,CAAE,CAC3BC,QAAQ,CAAErB,2BAA4B,CACvC,CAAC,EACC,CAAC,cAENxC,IAAA,QACEqD,SAAS,CAAC,4BAA4B,CACtCE,KAAK,CAAE,CACLC,eAAe,CAAE,OACfjC,YAAY,CAAGA,YAAY,CAAGzC,mBAAmB,GAErD,CAAE,CACE,CACP,cACDoB,KAAA,QAAKmD,SAAS,CAAC,mBAAmB,CAAAD,QAAA,eAChCpD,IAAA,QAAKqD,SAAS,CAAC,4BAA4B,CAAAD,QAAA,CACxC1C,QAAQ,cACPR,KAAA,CAAAE,SAAA,EAAAgD,QAAA,EACGnC,gBAAgB,cACfjB,IAAA,UACEqD,SAAS,CAAC,8BAA8B,CACxCK,IAAI,CAAC,MAAM,CACXI,IAAI,CAAEzC,cAAc,CAACuB,MAAM,CAAG,CAAE,CAChCM,KAAK,CAAE7B,cAAe,CACtBwC,QAAQ,CAAEZ,uBAAwB,CACnC,CAAC,cAEFjD,IAAA,QAAKqD,SAAS,CAAC,wBAAwB,CAAAD,QAAA,CAAEjC,QAAQ,CAAM,CACxD,cAEDnB,IAAA,QACEqD,SAAS,CAAC,aAAa,CACvBC,OAAO,CAAEf,gCAAiC,CAAAa,QAAA,cAE1CpD,IAAA,QAAKqD,SAAS,CAAC,gBAAgB,CAAM,CAAC,CACnC,CAAC,EACN,CAAC,cAEHrD,IAAA,QAAKqD,SAAS,CAAC,wBAAwB,CAAAD,QAAA,CAAEjC,QAAQ,CAAM,CACxD,CACE,CAAC,cACNnB,IAAA,QAAKqD,SAAS,CAAC,qBAAqB,CAAAD,QAAA,CAAE9C,SAAS,CAAM,CAAC,EACnD,CAAC,EACH,CAAC,CACH,CAAC,CAEV,CAAC,CAED;AAEA,KAAM,CAAAyD,UAAU,CAAGA,CAAA,GAAM,CACvB;AACA,KAAM,CACJC,WAAW,CACXC,cAAc,CACdC,QAAQ,CACRC,YAAY,CACZC,YAAY,CACZC,cAAc,CACdC,iBAAiB,CACjBC,YACF,CAAC,CAAG1E,aAAa,CAAgB,CAAC,CAAC,CACnC;AACA,KAAM,CAAC2E,KAAK,CAAEC,QAAQ,CAAC,CAAG5F,QAAQ,CAAS,CAAC,CAAC,CAE7C;AACA,KAAM,CAAA6F,wBAAwB,CAC5BhD,YAA8D,EAC3D,CACH,GAAI,CAACA,YAAY,CAAE,OACnB,KAAM,CAAEC,IAAK,CAAC,CAAGD,YAAY,CAC7B,GAAIC,IAAI,GAAK,IAAI,CAAE,CACjBC,KAAK,CAAC,gBAAgB,CAAC,CACvBhB,QAAQ,CAACxB,SAAS,CAAC,CAAC,CAAC,CACrB,OACF,CACA,GAAIuC,IAAI,GAAK,KAAK,CAAEC,KAAK,CAAC,eAAe,CAAC,CAC1C,GAAID,IAAI,GAAK,IAAI,CAAE,OAEnB,KAAM,CAAEgD,aAAc,CAAC,CAAGjD,YAA2C,CACrE6C,YAAY,CAACI,aAAa,CAAC,CAC3BF,QAAQ,CAACE,aAAa,CAAC/B,MAAM,CAAC,CAChC,CAAC,CAED;AACA,KAAM,CAAAgC,sBAAsB,CAAGA,CAAA,GAAM,CACnC,GAAIlE,QAAQ,CAAEE,QAAQ,CAAC1B,UAAU,CAAC,CAAC,CAAG,GAAG,CAAGC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAC3D,IAAIoB,SAAS,CAAEK,QAAQ,CAACvB,SAAS,CAACkB,SAAS,CAACsB,KAAK,CAAC,CAAC,CAC1D,CAAC,CAED;AACAlD,SAAS,CAAC,IAAM,CACd,GAAI,CAAC2B,SAAS,CAAE,OAChBd,uBAAuB,CAACc,SAAS,CAAC,CAAC2B,IAAI,CAACyC,wBAAwB,CAAC,CACnE,CAAC,CAAE,CAACpE,SAAS,CAAC,CAAC,CAEf;AACA,mBACEN,IAAA,QAAKmD,EAAE,CAAC,qBAAqB,CAAAC,QAAA,cAC3BlD,KAAA,QAAKmD,SAAS,CAAC,uBAAuB,CAAAD,QAAA,eACpClD,KAAA,QAAKmD,SAAS,CAAC,mBAAmB,CAAAD,QAAA,EAC/B1C,QAAQ,CAAG,QAAQ,CAAG,MAAM,cAC7BV,IAAA,SAAMqD,SAAS,CAAC,UAAU,CAAAD,QAAA,CAAEoB,KAAK,CAAO,CAAC,EACtC,CAAC,cACNtE,KAAA,QAAKmD,SAAS,CAAC,0BAA0B,CAAAD,QAAA,EACtCoB,KAAK,GAAK,CAAC,cACVxE,IAAA,QAAKqD,SAAS,CAAC,8BAA8B,CAAAD,QAAA,CAC1C,YAAY,CACV,CAAC,cAENpD,IAAA,QAAKqD,SAAS,CAAC,sBAAsB,CAAAD,QAAA,CAClCc,QAAQ,CAACW,GAAG,CAAEC,aAAa,eAC1B9E,IAAA,QAEEsD,OAAO,CAAEA,CAAA,GAAMzC,gBAAgB,CAACiE,aAAa,CAAChE,WAAW,CAAE,CAAAsC,QAAA,cAE3DpD,IAAA,CAACf,SAAS,EAAC6F,aAAa,CAAEA,aAAc,CAAE,CAAC,EAHtCA,aAAa,CAAChE,WAIhB,CACN,CAAC,CACC,CACN,cACDd,IAAA,QAAKqD,SAAS,CAAC,sBAAsB,CAAAD,QAAA,cACnCpD,IAAA,QACEqD,SAAS,CAAC,uBAAuB,CACjCC,OAAO,CAAEsB,sBAAuB,CAAAxB,QAAA,cAEhCpD,IAAA,QAAKqD,SAAS,CAAC,4BAA4B,CAAAD,QAAA,CACxC1C,QAAQ,cACPR,KAAA,CAAAE,SAAA,EAAAgD,QAAA,eACEpD,IAAA,QAAKqD,SAAS,CAAC,UAAU,CAAAD,QAAA,cACvBpD,IAAA,QAAKqD,SAAS,CAAC,gBAAgB,CAAM,CAAC,CACnC,CAAC,cACNrD,IAAA,QAAKqD,SAAS,CAAC,uBAAuB,CAAAD,QAAA,CAAE,KAAK,CAAM,CAAC,EACpD,CAAC,cAEHlD,KAAA,CAAAE,SAAA,EAAAgD,QAAA,eACEpD,IAAA,QAAKqD,SAAS,CAAC,uBAAuB,CAAAD,QAAA,CACnC,WAAW,CACT,CAAC,cACNpD,IAAA,QAAKqD,SAAS,CAAC,UAAU,CAAAD,QAAA,cACvBpD,IAAA,QAAKqD,SAAS,CAAC,uBAAuB,CAAM,CAAC,CAC1C,CAAC,EACN,CACH,CACE,CAAC,CACH,CAAC,CACH,CAAC,EACH,CAAC,cACNrD,IAAA,QAAKqD,SAAS,CAAC,4BAA4B,CAAAD,QAAA,CACxCoB,KAAK,GAAK,CAAC,eACVxE,IAAA,CAACF,UAAU,EACTkE,WAAW,CAAEA,WAAY,CACzBK,cAAc,CAAEA,cAAe,CAC/BU,UAAU,CAAEP,KAAO;AAAA,CACnBQ,YAAY,CAAE,CAAG;AAAA,CAClB,CACF,CACE,CAAC,EACH,CAAC,CACH,CAAC,CAEV,CAAC,CAED;AACA,mBACE9E,KAAA,CAAAE,SAAA,EAAAgD,QAAA,eACEpD,IAAA,CAACe,OAAO,GAAE,CAAC,cACXf,IAAA,CAAC+D,UAAU,GAAE,CAAC,EACd,CAAC,CAEP","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}