{"ast":null,"code":"import axios from \"axios\";\nconst DOMAIN = \"http://localhost:4000\";\nconst API_DOMAIN = `${DOMAIN}/api/v1`;\nconst authorization = accessToken => {\n  return {\n    headers: {\n      Authorization: `Bearer ${accessToken}`\n    }\n  };\n};\nconst SIGN_IN_URL = () => `${API_DOMAIN}/auth/sign-in`;\n_c = SIGN_IN_URL;\nconst SIGN_UP_URL = () => `${API_DOMAIN}/auth/sign-up`;\n_c2 = SIGN_UP_URL;\nexport const signInRequest = async requestBody => {\n  const result = await axios.post(SIGN_IN_URL(), requestBody).then(response => {\n    const responseBody = response.data;\n    return responseBody;\n  }).catch(error => {\n    if (!error.response.data) return null;\n    const responseBody = error.response.data;\n    return responseBody;\n  });\n  return result;\n};\nexport const signUpRequest = async requestBody => {\n  const result = await axios.post(SIGN_UP_URL(), requestBody).then(response => {\n    const responseBody = response.data;\n    return responseBody;\n  }).catch(error => {\n    if (!error.response.data) return null;\n    const responseBody = error.response.data;\n    return responseBody;\n  });\n  return result;\n};\nconst GET_BOARD_URL = boardNumber => `${API_DOMAIN}/board/${boardNumber}`;\n_c3 = GET_BOARD_URL;\nconst POST_BOARD_URL = () => `${API_DOMAIN}/board`;\n_c4 = POST_BOARD_URL;\nexport const getBoardRequest = async boardNumber => {\n  const result = await axios.get(GET_BOARD_URL(boardNumber)).then(response => {\n    const responseBody = response.data;\n    return responseBody;\n  }).catch(error => {\n    if (!error.response) return null;\n    const responseBody = error.response.data;\n    return responseBody;\n  });\n  return result;\n};\nexport const postBoardRequest = async (requestBody, accessToken) => {\n  const result = await axios.post(POST_BOARD_URL(), requestBody, authorization(accessToken)).then(response => {\n    const responseBody = response.data;\n    return responseBody;\n  }).catch(error => {\n    if (!error.response) return null;\n    const responseBody = error.response.data;\n    return responseBody;\n  });\n  return result;\n};\nconst GET_SIGN_IN_USER_URL = () => `${API_DOMAIN}/user`;\n_c5 = GET_SIGN_IN_USER_URL;\nexport const getSignInUserRequest = async accessToken => {\n  const result = await axios.get(GET_SIGN_IN_USER_URL(), authorization(accessToken)).then(response => {\n    const responseBody = response.data;\n    return responseBody;\n  }).catch(error => {\n    if (!error.response) return null;\n    const responseBody = error.response.data;\n    return responseBody;\n  });\n  return result;\n};\nconst FILE_DOMAIN = `${DOMAIN}/file`;\nconst FILE_UPLOAD_URL = () => `${FILE_DOMAIN}/upload`;\n_c6 = FILE_UPLOAD_URL;\nconst multipartFormData = {\n  headers: {\n    \"Content-Type\": \"multipart/form-data\"\n  }\n};\nexport const fileUploadRequest = async data => {\n  const result = await axios.post(FILE_UPLOAD_URL(), data, multipartFormData).then(response => {\n    const responseBody = response.data;\n    return responseBody;\n  }).catch(error => {\n    return null;\n  });\n  return result;\n};\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"SIGN_IN_URL\");\n$RefreshReg$(_c2, \"SIGN_UP_URL\");\n$RefreshReg$(_c3, \"GET_BOARD_URL\");\n$RefreshReg$(_c4, \"POST_BOARD_URL\");\n$RefreshReg$(_c5, \"GET_SIGN_IN_USER_URL\");\n$RefreshReg$(_c6, \"FILE_UPLOAD_URL\");","map":{"version":3,"names":["axios","DOMAIN","API_DOMAIN","authorization","accessToken","headers","Authorization","SIGN_IN_URL","_c","SIGN_UP_URL","_c2","signInRequest","requestBody","result","post","then","response","responseBody","data","catch","error","signUpRequest","GET_BOARD_URL","boardNumber","_c3","POST_BOARD_URL","_c4","getBoardRequest","get","postBoardRequest","GET_SIGN_IN_USER_URL","_c5","getSignInUserRequest","FILE_DOMAIN","FILE_UPLOAD_URL","_c6","multipartFormData","fileUploadRequest","$RefreshReg$"],"sources":["C:/Springboot-React-ts/board-front/src/apis/index.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport { SignInRequestDto, SignUpRequestDto } from \"./request/auth\";\r\nimport SignInResponseDto from \"./response/sign-in.response.dto\";\r\nimport { ResponseDto } from \"./response\";\r\nimport { SignUpResponseDto } from \"./response/auth\";\r\nimport { GetSignInUserResponseDto } from \"./response/user\";\r\nimport { PostBoardRequestDto } from \"./request/board\";\r\nimport { PostBoardResponseDto } from \"./response/board\";\r\nimport GetBoardResponseDto from \"./response/board/get-board.response.dto\";\r\n\r\nconst DOMAIN = \"http://localhost:4000\";\r\n\r\nconst API_DOMAIN = `${DOMAIN}/api/v1`;\r\n\r\nconst authorization = (accessToken: string) => {\r\n  return { headers: { Authorization: `Bearer ${accessToken}` } };\r\n};\r\n\r\nconst SIGN_IN_URL = () => `${API_DOMAIN}/auth/sign-in`;\r\nconst SIGN_UP_URL = () => `${API_DOMAIN}/auth/sign-up`;\r\n\r\nexport const signInRequest = async (requestBody: SignInRequestDto) => {\r\n  const result = await axios\r\n    .post(SIGN_IN_URL(), requestBody)\r\n    .then((response) => {\r\n      const responseBody: SignInResponseDto = response.data;\r\n      return responseBody;\r\n    })\r\n    .catch((error) => {\r\n      if (!error.response.data) return null;\r\n      const responseBody: ResponseDto = error.response.data;\r\n      return responseBody;\r\n    });\r\n  return result;\r\n};\r\nexport const signUpRequest = async (requestBody: SignUpRequestDto) => {\r\n  const result = await axios\r\n    .post(SIGN_UP_URL(), requestBody)\r\n    .then((response) => {\r\n      const responseBody: SignUpResponseDto = response.data;\r\n      return responseBody;\r\n    })\r\n    .catch((error) => {\r\n      if (!error.response.data) return null;\r\n      const responseBody: ResponseDto = error.response.data;\r\n      return responseBody;\r\n    });\r\n  return result;\r\n};\r\n\r\nconst GET_BOARD_URL = (boardNumber: number | string) =>\r\n  `${API_DOMAIN}/board/${boardNumber}`;\r\nconst POST_BOARD_URL = () => `${API_DOMAIN}/board`;\r\n\r\nexport const getBoardRequest = async (boardNumber: number | string) => {\r\n  const result = await axios\r\n    .get(GET_BOARD_URL(boardNumber))\r\n    .then((response) => {\r\n      const responseBody: GetBoardResponseDto = response.data;\r\n      return responseBody;\r\n    })\r\n    .catch((error) => {\r\n      if (!error.response) return null;\r\n      const responseBody: ResponseDto = error.response.data;\r\n      return responseBody;\r\n    });\r\n  return result;\r\n};\r\n\r\nexport const postBoardRequest = async (\r\n  requestBody: PostBoardRequestDto,\r\n  accessToken: string\r\n) => {\r\n  const result = await axios\r\n    .post(POST_BOARD_URL(), requestBody, authorization(accessToken))\r\n    .then((response) => {\r\n      const responseBody: PostBoardResponseDto = response.data;\r\n      return responseBody;\r\n    })\r\n    .catch((error) => {\r\n      if (!error.response) return null;\r\n      const responseBody: ResponseDto = error.response.data;\r\n      return responseBody;\r\n    });\r\n  return result;\r\n};\r\n\r\nconst GET_SIGN_IN_USER_URL = () => `${API_DOMAIN}/user`;\r\n\r\nexport const getSignInUserRequest = async (accessToken: string) => {\r\n  const result = await axios\r\n    .get(GET_SIGN_IN_USER_URL(), authorization(accessToken))\r\n    .then((response) => {\r\n      const responseBody: GetSignInUserResponseDto = response.data;\r\n      return responseBody;\r\n    })\r\n    .catch((error) => {\r\n      if (!error.response) return null;\r\n      const responseBody: ResponseDto = error.response.data;\r\n      return responseBody;\r\n    });\r\n  return result;\r\n};\r\n\r\nconst FILE_DOMAIN = `${DOMAIN}/file`;\r\n\r\nconst FILE_UPLOAD_URL = () => `${FILE_DOMAIN}/upload`;\r\n\r\nconst multipartFormData = {\r\n  headers: { \"Content-Type\": \"multipart/form-data\" },\r\n};\r\n\r\nexport const fileUploadRequest = async (data: FormData) => {\r\n  const result = await axios\r\n    .post(FILE_UPLOAD_URL(), data, multipartFormData)\r\n    .then((response) => {\r\n      const responseBody: string = response.data;\r\n      return responseBody;\r\n    })\r\n    .catch((error) => {\r\n      return null;\r\n    });\r\n  return result;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}