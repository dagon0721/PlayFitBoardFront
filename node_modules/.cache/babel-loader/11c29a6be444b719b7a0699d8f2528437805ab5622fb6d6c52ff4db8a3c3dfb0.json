{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import\"./style.css\";import{useNavigate,useParams}from\"react-router-dom\";import BoardItem from\"components/BoardItem\";import{SEARCH_PATH}from\"constant\";import Pagination from\"components/Pagination\";import{getRelationListRequest,getSearchBoardListRequest}from\"apis\";import{usePagination}from\"hooks\";import{Fragment as _Fragment,jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";// component: 검색 화면 컴포넌트 //\nexport default function Search(){// state: searchWord path variable 상태 //\nconst{searchWord}=useParams();// state: 페이지네이션 관련 상태 //\nconst{currentPage,currentSection,viewList,viewPageList,totalSection,setCurrentPage,setCurrentSection,setTotalList}=usePagination(5);// state:이전 검색어 상태 //\nconst[preSearchWord,setPreSearchWord]=useState(null);// state: 검색 게시물 개수 상태 //\nconst[count,setCount]=useState(0);// state: 관련 검색어 리스트 상태 //\nconst[relativeWordList,setrelativeWordList]=useState([]);// function: 네비게이트 함수 //\nconst navigate=useNavigate();// function: get search board list response 처리 함수 //\nconst getSearchBoardListResponse=responseBody=>{if(!responseBody)return;const{code}=responseBody;if(code===\"DBE\")alert(\"데이터베이스 오류입니다.\");if(code!==\"SU\")return;if(!searchWord)return;const{searchList}=responseBody;setTotalList(searchList);setCount(searchList.length);setPreSearchWord(searchWord);};// function: get relation list response 처리 함수 //\nconst getRelationListResponse=responseBody=>{if(!responseBody)return;const{code}=responseBody;if(code===\"DBE\")alert(\"데이터베이스 오류입니다.\");if(code!==\"SU\")return;const{relativeWordList}=responseBody;setrelativeWordList(relativeWordList);};// function: navigate를 이용해 상세 페이지로 이동\nconst onBoardItemClick=boardNumber=>{navigate(`/board/detail/${boardNumber}`);};// event handler: 연관 검색어 클릭 이벤트 처리 //\nconst onRelationWordClickHandler=word=>{navigate(SEARCH_PATH(word));};// effect: search word 상태 변경 시 실행될 함수 //\nuseEffect(()=>{if(!searchWord)return;getSearchBoardListRequest(searchWord,preSearchWord).then(getSearchBoardListResponse);getRelationListRequest(searchWord).then(getRelationListResponse);},[searchWord]);// render: 검색 화면 컴포넌트 렌더링 //\nif(!searchWord)return/*#__PURE__*/_jsx(_Fragment,{});return/*#__PURE__*/_jsx(\"div\",{id:\"search-wrapper\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"search-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"search-title-box\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"search-title\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"search-title-emphasis\",children:searchWord}),\"에 대한 검색결과 입니다.\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"search-count\",children:count})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"search-contents-box\",children:[count===0?/*#__PURE__*/_jsx(\"div\",{className:\"search-contents-nothing\",children:\"검색 결과가 없습니다.\"}):/*#__PURE__*/_jsx(\"div\",{className:\"search-contents\",children:viewList.map(boardListItem=>/*#__PURE__*/_jsx(\"div\",{onClick:()=>onBoardItemClick(boardListItem.boardNumber),children:/*#__PURE__*/_jsx(BoardItem,{boardListItem:boardListItem})},boardListItem.boardNumber))}),/*#__PURE__*/_jsx(\"div\",{className:\"search-relation-box\",children:/*#__PURE__*/_jsx(\"div\",{className:\"search-relation-card\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"search-relation-card-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"search-relation-card-title\",children:\"관련검색어\"}),relativeWordList.length===0?/*#__PURE__*/_jsx(\"div\",{className:\"search-relation-card-contents-nothing\",children:\"관련 검색어가 없습니다\"}):/*#__PURE__*/_jsx(\"div\",{className:\"search-relation-card-contents\",children:relativeWordList.map(word=>/*#__PURE__*/_jsx(\"div\",{className:\"word-badge\",onClick:()=>onRelationWordClickHandler(word),children:word}))})]})})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"search-pagination-box\",children:count!==0&&/*#__PURE__*/_jsx(Pagination,{currentPage:currentPage,setCurrentPage:setCurrentPage,totalItems:count// 총 게시물 수\n,itemsPerPage:5// 한 페이지당 게시물 수\n})})]})});}","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","BoardItem","SEARCH_PATH","Pagination","getRelationListRequest","getSearchBoardListRequest","usePagination","Fragment","_Fragment","jsx","_jsx","jsxs","_jsxs","Search","searchWord","currentPage","currentSection","viewList","viewPageList","totalSection","setCurrentPage","setCurrentSection","setTotalList","preSearchWord","setPreSearchWord","count","setCount","relativeWordList","setrelativeWordList","navigate","getSearchBoardListResponse","responseBody","code","alert","searchList","length","getRelationListResponse","onBoardItemClick","boardNumber","onRelationWordClickHandler","word","then","id","children","className","map","boardListItem","onClick","totalItems","itemsPerPage"],"sources":["C:/Springboot-React-ts/board-front/src/views/Search/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./style.css\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { BoardListItem } from \"types/interface\";\r\nimport { latestBoardListMock } from \"mocks\";\r\nimport BoardItem from \"components/BoardItem\";\r\nimport { SEARCH_PATH } from \"constant\";\r\nimport Pagination from \"components/Pagination\";\r\nimport { getRelationListRequest, getSearchBoardListRequest } from \"apis\";\r\nimport { GetSearchBoardListResponseDto } from \"apis/response/board\";\r\nimport { ResponseDto } from \"apis/response\";\r\nimport { usePagination } from \"hooks\";\r\nimport { GetRelationListResponseDto } from \"apis/search\";\r\n\r\n// component: 검색 화면 컴포넌트 //\r\nexport default function Search() {\r\n  // state: searchWord path variable 상태 //\r\n  const { searchWord } = useParams();\r\n  // state: 페이지네이션 관련 상태 //\r\n  const {\r\n    currentPage,\r\n    currentSection,\r\n    viewList,\r\n    viewPageList,\r\n    totalSection,\r\n    setCurrentPage,\r\n    setCurrentSection,\r\n    setTotalList,\r\n  } = usePagination<BoardListItem>(5);\r\n  // state:이전 검색어 상태 //\r\n  const [preSearchWord, setPreSearchWord] = useState<string | null>(null);\r\n  // state: 검색 게시물 개수 상태 //\r\n  const [count, setCount] = useState<number>(0);\r\n\r\n  // state: 관련 검색어 리스트 상태 //\r\n  const [relativeWordList, setrelativeWordList] = useState<string[]>([]);\r\n\r\n  // function: 네비게이트 함수 //\r\n  const navigate = useNavigate();\r\n  // function: get search board list response 처리 함수 //\r\n  const getSearchBoardListResponse = (\r\n    responseBody: GetSearchBoardListResponseDto | ResponseDto | null\r\n  ) => {\r\n    if (!responseBody) return;\r\n    const { code } = responseBody;\r\n    if (code === \"DBE\") alert(\"데이터베이스 오류입니다.\");\r\n    if (code !== \"SU\") return;\r\n\r\n    if (!searchWord) return;\r\n    const { searchList } = responseBody as GetSearchBoardListResponseDto;\r\n    setTotalList(searchList);\r\n    setCount(searchList.length);\r\n    setPreSearchWord(searchWord);\r\n  };\r\n\r\n  // function: get relation list response 처리 함수 //\r\n  const getRelationListResponse = (\r\n    responseBody: GetRelationListResponseDto | ResponseDto | null\r\n  ) => {\r\n    if (!responseBody) return;\r\n    const { code } = responseBody;\r\n    if (code === \"DBE\") alert(\"데이터베이스 오류입니다.\");\r\n    if (code !== \"SU\") return;\r\n\r\n    const { relativeWordList } = responseBody as GetRelationListResponseDto;\r\n    setrelativeWordList(relativeWordList);\r\n  };\r\n\r\n  // function: navigate를 이용해 상세 페이지로 이동\r\n  const onBoardItemClick = (boardNumber: number) => {\r\n    navigate(`/board/detail/${boardNumber}`);\r\n  };\r\n  // event handler: 연관 검색어 클릭 이벤트 처리 //\r\n  const onRelationWordClickHandler = (word: string) => {\r\n    navigate(SEARCH_PATH(word));\r\n  };\r\n\r\n  // effect: search word 상태 변경 시 실행될 함수 //\r\n  useEffect(() => {\r\n    if (!searchWord) return;\r\n    getSearchBoardListRequest(searchWord, preSearchWord).then(\r\n      getSearchBoardListResponse\r\n    );\r\n    getRelationListRequest(searchWord).then(getRelationListResponse);\r\n  }, [searchWord]);\r\n\r\n  // render: 검색 화면 컴포넌트 렌더링 //\r\n  if (!searchWord) return <></>;\r\n  return (\r\n    <div id=\"search-wrapper\">\r\n      <div className=\"search-container\">\r\n        <div className=\"search-title-box\">\r\n          <div className=\"search-title\">\r\n            <span className=\"search-title-emphasis\">{searchWord}</span>\r\n            {\"에 대한 검색결과 입니다.\"}\r\n          </div>\r\n          <div className=\"search-count\">{count}</div>\r\n        </div>\r\n        <div className=\"search-contents-box\">\r\n          {count === 0 ? (\r\n            <div className=\"search-contents-nothing\">\r\n              {\"검색 결과가 없습니다.\"}\r\n            </div>\r\n          ) : (\r\n            <div className=\"search-contents\">\r\n              {viewList.map((boardListItem) => (\r\n                <div\r\n                  key={boardListItem.boardNumber}\r\n                  onClick={() => onBoardItemClick(boardListItem.boardNumber)}\r\n                >\r\n                  <BoardItem boardListItem={boardListItem} />\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n          <div className=\"search-relation-box\">\r\n            <div className=\"search-relation-card\">\r\n              <div className=\"search-relation-card-container\">\r\n                <div className=\"search-relation-card-title\">{\"관련검색어\"}</div>\r\n                {relativeWordList.length === 0 ? (\r\n                  <div className=\"search-relation-card-contents-nothing\">\r\n                    {\"관련 검색어가 없습니다\"}\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"search-relation-card-contents\">\r\n                    {relativeWordList.map((word) => (\r\n                      <div\r\n                        className=\"word-badge\"\r\n                        onClick={() => onRelationWordClickHandler(word)}\r\n                      >\r\n                        {word}\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"search-pagination-box\">\r\n          {count !== 0 && (\r\n            <Pagination\r\n              currentPage={currentPage}\r\n              setCurrentPage={setCurrentPage}\r\n              totalItems={count} // 총 게시물 수\r\n              itemsPerPage={5} // 한 페이지당 게시물 수\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}